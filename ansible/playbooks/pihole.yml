---
- hosts: pihole
  become: yes
  tasks:
    - name: Disable systemd-resolved
      service:
        name: systemd-resolved
        state: stopped
        enabled: no

    - name: Temporary DNS fix
      lineinfile:
        path: /etc/resolv.conf
        line: "nameserver 1.1.1.1"

    - name: "Add Docker's official GPG key"
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/trusted.gpg.d/docker.asc
        mode: '0644'
        force: true

    - name: "Setup Docker's stable repository"
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install necessary packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - docker-ce

    - name: Ensure Docker is running
      service:
        name: docker
        state: started
        enabled: yes

    # - name: Create internal network for cloudflared
    #   docker_network:
    #     name: internal
    #     state: present
    #     ipam_config:
    #       - subnet: 172.30.9.0/29

    # - name: Run Cloudflared Docker container
    #   docker_container:
    #     name: cloudflared
    #     image: cloudflare/cloudflared:{{ cloudflared_version | default('latest') }}
    #     state: started
    #     networks:
    #       - name: internal
    #         ipv4_address: 172.30.9.2
    #     restart_policy: unless-stopped
    #     env:
    #       TUNNEL_DNS_ADDRESS: "0.0.0.0"
    #     command: ["proxy-dns", "--port", "5053", "--upstream", "https://1.1.1.1/dns-query", "--upstream", "https://1.0.0.1/dns-query"]
    #
    - name: Ensure /etc/pihole exists and is a directory
      file:
        path: /etc/pihole
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy adlists to Pi-hole pihole
      copy:
        src: pihole/adlists.list
        dest: /etc/pihole/adlists.list
        owner: root
        group: root
        mode: 0644


    - name: Run Pi-hole Docker container
      docker_container:
        name: pihole
        image: pihole/pihole:{{ pihole_version | default('latest') }}
        state: started
        restart_policy: unless-stopped
        ports:
          - "53:53/tcp"
          - "53:53/udp"
          - "67:67/udp"
          - "80:80/tcp"
          - "443:443/tcp"
        env:
          PIHOLE_DNS_1: "10.26.26.1#5335"
          DNS2: "no"
          TZ: "{{ timezone }}"
          WEBTHEME: "default-dark"
          # This allows Pihole to work in this setup and when answering across VLANS,
          # but do not expose pi-hole to the internet!
          DNSMASQ_LISTENING: "all"
        networks:
          # - name: internal
          #   ipv4_address: 172.30.9.3
          - name: bridge
        volumes:
          - "/etc/pihole/:/etc/pihole/"
          - "/etc/pihole/adlists.list:/etc/pihole/adlists.list"
          - "/etc/dnsmasq.d/:/etc/dnsmasq.d/"

    - name: Wait for Pi-hole to start
      wait_for:
        host: "{{ pihole_server_ip }}"
        port: 53
        delay: 10
        timeout: 60

    # - name: Check Pi-hole gravity update status
    #   command: docker exec pihole pihole status
    #   register: pihole_status
    #   until: "'gravity is up to date' in pihole_status.stdout"
    #   retries: 5
    #   delay: 10

    - name: Clone whitelist repository
      git:
        repo: https://github.com/anudeepND/whitelist.git
        dest: /tmp/whitelist
        clone: yes
        force: yes
        depth: 1
        version: master

    - name: Whitelist domains using whitelist.py
      shell: |
        python3 /tmp/whitelist/scripts/whitelist.py --dir /etc/pihole --docker

    - name: Setup split DNS
      lineinfile:
        path: /etc/dnsmasq.d/99-k8s-gateway-forward.conf
        line: "server=/adrianperez.org/10.26.28.3/"
        create: yes
